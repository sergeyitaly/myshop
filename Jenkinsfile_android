pipeline {
    agent any

    environment {
        DOCKER_ANDROID_IMAGE = 'android-build-image'
        DJANGO_CONTAINER_NAME = 'django-web'
        ANDROID_WORKDIR = '/app/android'
        GOOGLE_PLAY_CREDENTIALS = credentials('play-store-json-key') 
    }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [[url: 'https://github.com/sergeyitaly/myshop']]
                ])
            }
        }


        stage('Build Android Image') {
            steps {
                script {
                    // Build the Docker image using Dockerfile_android
                    sh """
                    docker build -t $DOCKER_ANDROID_IMAGE -f Dockerfile_android .
                    """
                }
            }
        }

        stage('Run APK Build') {
            steps {
                script {
                    // Use the built image to run the APK build
                    sh """
                    docker run --rm --name android-build-container $DOCKER_ANDROID_IMAGE
                    """
                }
            }
        }

        stage('Copy APK') {
            steps {
                script {
                    // Copy the built APK from the container to the host
                    sh """
                    docker cp android-build-container:/app/app-release.apk ./app-release.apk
                    """
                }
            }
        }

        stage('Deploy to Google Play') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'play-store-json-key', variable: 'GOOGLE_PLAY_CREDENTIALS_JSON')]) {
                        sh '''
                        gcloud auth activate-service-account --key-file=$GOOGLE_PLAY_CREDENTIALS_JSON
                        gcloud firebase appdistribution releases upload ./app-release.apk --app <firebase-app-id> --groups <distribution-group>
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
