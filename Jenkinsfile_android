pipeline {
    agent any

    environment {
        DJANGO_CONTAINER_NAME = 'django-web' 
        ANDROID_WORKDIR = '/app/android' 
        APK_OUTPUT_PATH = '/app/android/app/build/outputs/apk/release/app-release.apk'
        GOOGLE_PLAY_CREDENTIALS = credentials('play-store-json-key')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Code is already running inside the django-web container.'
            }
        }

        stage('Build APK') {
            steps {
                script {
                    // Execute Gradle commands inside the running container
                    sh """
                    docker exec $DJANGO_CONTAINER_NAME bash -c '
                    cd /app/android &&
                    ./gradlew clean assembleRelease
                    '
                    """
                }
            }
        }


        stage('Retrieve APK') {
            steps {
                script {
                    // Copy the generated APK from the running container to the host machine
                    sh "docker cp $DJANGO_CONTAINER_NAME:$APK_OUTPUT_PATH ./app-release.apk"
                }
            }
        }

        stage('Deploy to Google Play') {
            steps {
                script {
                    // Deploy the APK to Google Play using gcloud CLI
                    withCredentials([file(credentialsId: 'play-store-json-key', variable: 'GOOGLE_PLAY_CREDENTIALS_JSON')]) {
                        sh '''
                        gcloud auth activate-service-account --key-file=$GOOGLE_PLAY_CREDENTIALS_JSON
                        gcloud firebase appdistribution releases upload ./app-release.apk --app <firebase-app-id> --groups <distribution-group>
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
