pipeline {
    agent any

    environment {
        IMAGE_NAME = "sergeyitaly/koloryt:serhii_test" // Define the Docker image name
        CONTAINER_NAME = "koloryt_container"          // Temporary container name
        APK_OUTPUT = "app-release.apk"               // APK output filename
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the Git repository
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Run Container and Build APK') {
            steps {
                script {
                    // Run the container
                    sh "docker run --name ${CONTAINER_NAME} ${IMAGE_NAME} true"

                    // Copy APK from the container to the workspace
                    sh "docker cp ${CONTAINER_NAME}:/app/app-release.apk ${WORKSPACE}/${APK_OUTPUT}"
                }
            }
        }

        stage('Archive APK') {
            steps {
                // Archive the APK in Jenkins
                archiveArtifacts artifacts: "${APK_OUTPUT}", fingerprint: true
            }
        }

        stage('Deploy APK to Google Play') {
            steps {
                script {
                    // Use Fastlane for deployment
                    withCredentials([file(credentialsId: 'google-play-service-account-key', variable: 'SERVICE_ACCOUNT_JSON')]) {
                        sh """
                        fastlane supply \
                        --apk ${APK_OUTPUT} \
                        --track production \
                        --json_key ${SERVICE_ACCOUNT_JSON}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up the container after build
            script {
                sh "docker rm -f ${CONTAINER_NAME} || true"
            }
        }
        cleanup {
            cleanWs() // Clean up the workspace
        }
    }
}
